generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String   @id @default(uuid())
  email      String   @unique
  password   String
  role       ROLE
  status     STATUS   @default(in_progress)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  profile Profile?
}

model Profile {
  profile_id String @id @default(uuid())

  user_id String @unique
  user    User   @relation(fields: [user_id], references: [user_id])

  name        String
  email       String
  gender      GENDER
  dateOfBirth DateTime
  contactNo   String

  presentAddressId String
  presentAddress   FullAddress @relation(name: "PresentAddress", fields: [presentAddressId], references: [address_id])

  permanentAddressId String
  permanentAddress   FullAddress @relation(name: "permanentAddress", fields: [permanentAddressId], references: [address_id])

  profileImage String?
  isDeleted    Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  review         Review[]
  Tutor          Tutor?
  Tuition        Tuition[]
  TutorSchedule  TutorSchedule[]
  TuitionRequest TuitionRequest[]
}

model FullAddress {
  address_id                String           @id @default(uuid())
  address           String
  area              String
  district          String
  presentProfiles   Profile[]        @relation(name: "PresentAddress")
  permanentProfiles Profile[]        @relation(name: "permanentAddress")
  Tuition           Tuition[]
  TuitionRequest    TuitionRequest[]
}

model Tutor {
  tutor_id String @id @default(uuid())

  user_id String  @unique
  profile Profile @relation(fields: [user_id], references: [user_id])

  medium           MEDIUM[]
  class            Int[]
  experties        String[]
  yearOfExperience String
  fee              String
  details          String
  location         String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  selectedTuition    Tuition[]            @relation(name: "selected_tutor")
  review             Review[]
  tutorQualification TutorQualification[]
  tutorSchedule      TutorSchedule[]
  appliedTuition     AppliedTuition[]
  TuitionRequest     TuitionRequest[]
}

model Schedule {
  schedule_id         String   @id @default(uuid())
  days       String[]
  startTime  String
  endTime    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tutorSchedule  TutorSchedule[]
  Tuition        Tuition?
  TuitionRequest TuitionRequest?
}

model TutorSchedule {
  tutor_id String
  tutor    Tutor  @relation(fields: [tutor_id], references: [tutor_id])

  schedule_id String
  schedule    Schedule @relation(fields: [schedule_id], references: [schedule_id])

  isBooked Boolean @default(false)

  student_id String?
  student    Profile? @relation(fields: [student_id], references: [user_id])

  @@id([tutor_id, schedule_id])
}

model Qualification {
  qualification_id                 String               @id @default(uuid())
  degree             String
  year               String
  institution        String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  tutorQualification TutorQualification[]
}

model TutorQualification {
  tutor_id String
  tutor    Tutor  @relation(fields: [tutor_id], references: [tutor_id])

  qualification_id String
  qualification    Qualification @relation(fields: [qualification_id], references: [qualification_id])

  @@id([tutor_id, qualification_id])
}

model Review {
  review_id         String   @id @default(uuid())
  student_id String
  student    Profile? @relation(fields: [student_id], references: [user_id])

  tutor_id String
  tutor    Tutor? @relation(fields: [tutor_id], references: [tutor_id])

  rating     String
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Tuition {
  tuition_id String @id @default(uuid())

  student_id String
  student    Profile @relation(fields: [student_id], references: [user_id])

  subject String
  class   Int[]
  medium  MEDIUM

  address_id String
  address    FullAddress @relation(fields: [address_id], references: [address_id])

  contactNo      String
  salary         String
  gender         String
  status         Tuition_STATUS @default(available)
  selected_tutor String?
  selectedTutor  Tutor?         @relation(name: "selected_tutor", fields: [selected_tutor], references: [tutor_id])

  schedule_id String   @unique
  schedule    Schedule @relation(fields: [schedule_id], references: [schedule_id])

  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  appliedTuition AppliedTuition[]
}

model AppliedTuition {
  tuition_id String
  tuition    Tuition @relation(fields: [tuition_id], references: [tuition_id])

  tutor_id String
  tutor    Tutor  @relation(fields: [tutor_id], references: [tutor_id])

  @@id([tuition_id, tutor_id])
}

model TuitionRequest {
  tuition_request_id String @id @default(uuid())

  tutor_id String
  tutor    Tutor  @relation(fields: [tutor_id], references: [tutor_id])

  student_id String
  student    Profile? @relation(fields: [student_id], references: [user_id])

  subject String
  class   String
  medium  MEDIUM

  address_id String
  address    FullAddress @relation(fields: [address_id], references: [address_id])

  contactNo String
  salary    String
  status    REQUEST_STATUS @default(pending)

  schedule_id String   @unique
  schedule    Schedule @relation(fields: [schedule_id], references: [schedule_id])
}

//enums

enum ROLE {
  super_admin
  admin
  tutor
  student
}

enum STATUS {
  in_progress
  blocked
}

enum GENDER {
  male
  female
}

enum MEDIUM {
  bangla
  english
}

enum Tuition_STATUS {
  available
  booked
}

enum REQUEST_STATUS {
  accepted
  pending
  rejected
}
